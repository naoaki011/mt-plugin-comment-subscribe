id: 'CommentSubscribe'
key: 'comment-subscribe'
name: 'Comment Subscribe'
description: "Allows viewers to subscribe to recieve emails every time a comment is posted for a given entry."
version: 1.5.3
schema_version: 5
author_name : "Robert Synnott, Byrne Reese"
l10n_class: CommentSubscribe::L10N

object_types:
  commentsubscriptions: 'CommentSubscribe::CommentSubscriptions'

callbacks:
  MT::Comment::post_save: $CommentSubscribe::CommentSubscribe::Plugin::process_new_comment

default_templates:
  base_path: templates
  global:email:
    commentsubscribe_notify: 
      label: 'Comment Notification to Subscribers'

options:
  fieldsets:
    general:
      label: 'General Settings'
  use_queue:
    label: 'Send notifications via background task?'
    type: checkbox
    fieldset: general
    default: 0
    scope: system 
  from_header:
    label: 'Send emails from?'
    type: text
    hint: 'The email address comment notification emails will be sent from. Leave this field blank if you wish comment notification emails to be sent from the author of the entry.'
    fieldset: general
    scope: system 
  subject_header:
    label: 'Email Subject'
    type: text
    default: '(%BLOG%) %COMMENTER% posted a new comment on "%TITLE%"'
    hint: 'The subject of the email that will be sent.<br>%BLOG% = Blog Name<br>%COMMENTER% = Commenter Name<br>%TITLE% = Blog post title'
    fieldset: general
    scope: system 

task_workers:
  commentsub_email_worker:
    label: "Send email notifications for new comments."
    class: 'CommentSubscribe::EmailWorker'

upgrade_functions:
  add_uniqkey:
    version_limit: 2
    priority: 1
    updater:
      type: commentsubscriptions
      label: Populating unique keys...
      code: >
          sub {
               use String::Random qw( random_string );
               $_[0]->uniqkey( random_string('000000000000',[ 'A'..'Z', 'a'..'z' ]) );
          }

applications:
  comments:
    methods:
      unsub: $CommentSubscribe::CommentSubscribe::Plugin::unsub
